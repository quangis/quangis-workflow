# [SC][TODO] ambiguous references to arcpro tools in workflows for "tools:VelocityField" (lines 230 and 235) and "tools:CalculatePartialAmounts" (line 562)

#[SC][TODO] measurement level prefix

@base <https://github.com/quangis/cct/blob/master/tools/tools.ttl#>.

@prefix : <https://github.com/quangis/cct/blob/master/tools/tools.ttl#>.
@prefix cct: <https://github.com/quangis/cct#>.
@prefix wf: <http://geographicknowledge.de/vocab/Workflow.rdf#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
# @prefix tools: <http://geographicknowledge.de/vocab/GISTools.rdf#>.
@prefix tools: <https://github.com/quangis/cct/blob/master/tools/tools.ttl#>.
@prefix ccd: <http://geographicknowledge.de/vocab/CoreConceptData.rdf#>.
@prefix exm: <http://geographicknowledge.de/vocab/ExtensiveMeasures.rdf#>.

# [SC] tool prefixes
@prefix arcprodm: <https://pro.arcgis.com/en/pro-app/latest/tool-reference/data-management/>.
@prefix arcpro3d: <https://pro.arcgis.com/en/pro-app/latest/tool-reference/3d-analyst/>.
@prefix arcproan: <https://pro.arcgis.com/en/pro-app/latest/tool-reference/analysis/>.
@prefix arcprona: <https://pro.arcgis.com/en/pro-app/latest/tool-reference/network-analyst/>.
@prefix arcprosa: <https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-analyst/>.
@prefix arcproco: <https://pro.arcgis.com/en/pro-app/latest/tool-reference/conversion/>.

#### Spatial join

######### Spatial join with sum rule
# with JOIN_ONE_TO_ONE parameter, with Merge_RULe sum for Ratio data.
sig:SpatialJoinSumTessRatio a :Signature;
    :input [ :id 1; a ccd:ObjectQ, ccd:VectorA, exm:ERA ];
    :input [ :id 2; a ccd:ObjectQ, ccd:VectorTessellationA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorTessellationA, exm:ERA ];
    rdfs:comment
        "Sums the attributes at ratio measurement level from one feature to another based on the spatial relation";
    cct:expression
        """
        1: ObjectInfo(Ratio);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (join (get_attrL 2) (groupbyR sum (join_key
                (select eq (rTopo
                    (pi2 (get_attrL 1))
                    (pi2 (get_attrL 2))
                ) in)
                (getamounts 1)
            )))
        """.

# with JOIN_ONE_TO_ONE parameter, with Merge_RULe sum for Count data.
sig:SpatialJoinSumTessCount a :Signature;
    :input [ :id 1; a ccd:ObjectQ, ccd:VectorA, ccd:CountA ];
    :input [ :id 2; a ccd:ObjectQ, ccd:VectorTessellationA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorTessellationA, ccd:CountA ];
    rdfs:comment
        "Sums the attributes at Count measurement level from one feature to another based on the spatial relation";
    cct:expression
        """
        1: ObjectInfo(Count);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (join (get_attrL 2) (groupbyR sum (join_key
                (select eq (rTopo
                    (pi2 (get_attrL 1))
                    (pi2 (get_attrL 2))
                ) in)
                (getamounts 1)
            )))
        """.

######### Spatial join with sum rule with vector amounts
# with JOIN_ONE_TO_ONE parameter, with Merge_RULe sum for Ratio data.
sig:SpatialJoinAmountSumTessRatio a :Signature;
    :input [ :id 1; a ccd:AmountQ, ccd:VectorRegionA, exm:ERA ];
    :input [ :id 2; a ccd:ObjectQ, ccd:VectorTessellationA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorTessellationA, exm:ERA ];
    rdfs:comment
        "Sums the attributes at ratio measurement level from one feature to another based on the spatial relation";
    cct:expression
        """
        1: Amounts(Ratio);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2) (join
                (get_attrL 2)
                (groupbyR sum (join_key
                    (select
                        eq
                        (rTopo (pi1 1) (pi2 (get_attrL 2)))
                        in)
                    1
                ))
            )
        """.

# with JOIN_ONE_TO_ONE parameter, with Merge_RULe sum for Count data.
sig:SpatialJoinAmountSumTessCount a :Signature;
    :input [ :id 1; a ccd:AmountQ, ccd:VectorRegionA, ccd:CountA ];
    :input [ :id 2; a ccd:ObjectQ, ccd:VectorTessellationA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorTessellationA, ccd:CountA ];
    rdfs:label
        "Sums the attributes at Count measurement level from one feature to another based on the spatial relation";
    cct:expression
        """
        1: Amounts(Count);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (join
                (get_attrL 2)
                (groupbyR sum (join_key
                    (select
                        eq
                        (rTopo (pi1 1) (pi2 (get_attrL 2)))
                        in
                    )
                    1
                ))
            )
        """.

#### spatial join with mean rule
# with JOIN_ONE_TO_ONE parameter, with Merge_RULe mean for interval data.
sig:SpatialJoinMeanTessInterval a :Signature;
    :input [ :id 1; a ccd:ObjectQ, ccd:VectorA, ccd:IntervalA ];
    :input [ :id 2; a ccd:ObjectQ, ccd:VectorTessellationA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorTessellationA, ccd:IntervalA ];
    rdfs:comment
    "Averages the attributes at interval measurement level from one feature to another based on the spatial relation";
    cct:expression
        """
        1: ObjectInfo(Ratio);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (join
                (get_attrL 2)
                (groupbyR avg (join_key (select eq (rTopo
                    (pi2 (get_attrL 1))
                    (pi2 (get_attrL 2))
                ) in) (getamounts 1)))
            )
        """.

# with JOIN_ONE_TO_ONE parameter, with Merge_RULe mean for Ratio data.
sig:SpatialJoinMeanTessRatio a :Signature;
    :input [ :id 1; a ccd:ObjectQ, ccd:VectorA, ccd:RatioA ];
    :input [ :id 2; a ccd:ObjectQ, ccd:VectorTessellationA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorTessellationA, ccd:RatioA ];
    rdfs:comment
        "Averages the attributes at Ratio measurement level from one feature to another based on the spatial relation";
    cct:expression
        """
        1: ObjectInfo(Ratio);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (join
                (get_attrL 2)
                (groupbyR avg (join_key (select eq (rTopo
                    (pi2 (get_attrL 1))
                    (pi2 (get_attrL 2))
                ) in) (getamounts 1)))
            )
        """.

# with JOIN_ONE_TO_ONE parameter, with Merge_RULe mean for Count data.
sig:SpatialJoinMeanTessCount a :Signature;
    :input [ :id 1; a ccd:ObjectQ, ccd:VectorA, ccd:CountA ];
    :input [ :id 2; a ccd:ObjectQ, ccd:VectorTessellationA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorTessellationA, ccd:CountA ];
    rdfs:comment
        "Averages the attributes at Count measurement level from one feature to another based on the spatial relation";
    cct:expression
        """
        1: ObjectInfo(Count);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (join
                (get_attrL 2)
                (groupbyR avg (join_key (select eq (rTopo
                    (pi2 (get_attrL 1))
                    (pi2 (get_attrL 2))
                ) in) (getamounts 1)))
            )
        """.

#### spatial join with the count rule
# with JOIN_ONE_TO_ONE parameter and with Merge_RULe count.
sig:SpatialJoinCountTess a :Signature;
    :input [ :id 1; a ccd:ObjectQ, ccd:VectorA ];
    :input [ :id 2; a ccd:ObjectQ, ccd:VectorTessellationA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorTessellationA, ccd:CountA ];
    rdfs:comment
        "Counts the number of features from one feature to another based on the spatial relation";
    cct:expression
        """
        1: ObjectInfo(Nom);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (apply1
                (ocont (get_attrL 1))
                (get_attrL 2)
            )
        """.


### Scenario: Noise (noisePortionAmsterdam.ttl, noiseProPortionAmsterdam.ttl (=raster version), noiseProPortionAmsterdam2.ttl (= vector version))
### Source: own
#-------------------------------

#Noise portion

sig:ClipFieldRaster2ObjectExtent a :Signature;
    :input [ :id 1; a ccd:FieldRaster, ccd:OrdinalA ];
    :input [ :id 2; a ccd:ObjectVector ];
    wf:output [ a ccd:FieldRaster, ccd:OrdinalA];
    rdfs:comment
        "Clips some interval scaled field raster to the extent of an object layer.";
    cct:expression #"bowtie field x deify merge pi2 objectregions x".
        """
        1: Field(Ord);
        2: ObjectInfo(Nom);
        subset 1 (deify (ocover
            (get_attrL 2)
            (pi1 (get_attrL 2))
        ))
        """.

sig:RegionFromRasterExtent a :Signature;
    :input [ :id 1; a ccd:FieldRaster, ccd:NominalA ];
    wf:output [ a ccd:AmountQ, ccd:VectorRegionA, ccd:NominalA ];
    rdfs:comment
        "Make a region layer from the extent of a raster. Measures the coverage of a nominal field.";
    cct:expression
        """
        1: Field(Nom);
        nest2 (name (pi2 1)) (reify (fcover 1 (pi2 1)))
        """.

#Noise proportion (raster)

#<https://pro.arcgis.com/en/pro-app/tool-reference/conversion/polygon-to-raster.htm>
###Field Polygon to raster
sig:CoverageToNominalFieldRaster a :Signature;
    :input [ :id 1; a ccd:Coverage, ccd:PlainNominalA ];
    wf:output [ a ccd:FieldRaster, ccd:PlainNominalA ];
    rdfs:comment
        "Converts Field polygons to nominal field Rasters";
    cct:expression
        "revert (1: Coverages(Nom))".

sig:ContourToFieldRaster a :Signature;
    :input [ :id 1; a ccd:Contour ];
    wf:output [ a ccd:FieldRaster, ccd:PlainOrdinalA ];
    rdfs:comment
        "Converts contour maps to field Rasters";
    cct:expression
        "revert (1: Contour)".

#<https://pro.arcgis.com/en/pro-app/tool-reference/spatial-analyst/raster-calculator.htm>

### local map algebra with only a single input layer
sig:LocalMapAlgebraSubOrder a :Signature;
    :input [ :id 1; a ccd:FieldRaster, ccd:OrdinalA ];
    wf:output [ a ccd:FieldRaster, ccd:OrdinalA ];
    rdfs:comment
        "Builds and executes a Local Map Algebra expression (smaller than or greater than some number) using Python syntax using rasters with an ordinal level";
    cct:expression
        "select (compose2 notj leq) (1: Field(Ord)) (-: Ord)".

### local map algebra transformation with ratio field
sig:LocalMapAlgebraSubRatio a :Signature;
    :input [ :id 1; a ccd:FieldRaster, ccd:RatioA ];
    wf:output [ a ccd:FieldRaster, ccd:RatioA ];
    rdfs:comment
        "Builds and executes a Local Map Algebra expression (less than or equal to some number) using Python syntax using rasters with a ratio level";
    cct:expression
        "select (compose2 notj leq) (1: Field(Ratio)) (-: Ratio)".

tools:RasterToContour a :ToolCombination;
    tools:implements tools:RasterToContourInterval;
    wf:edge _:wf3_1, _:wf3_2;
    wf:source _:in31.
_:wf3_1 wf:applicationOf tools:RasterToIsoRaster;
    wf:input1 _:in31;
    wf:output _:out31.
_:wf3_2 wf:applicationOf tools:RegionFromRasterExtent;
    wf:input1 _:out31;
    wf:output _:out32.

sig:RasterToContourInterval a :Signature;
    wf:input1 _:in31;
    wf:output _:out32;
    rdfs:comment
        "Converts a field raster to a Contour dataset. The raster is first reclassified to an ordinal raster, and then converted to a polygon layer.";
    cct:expression
        "invert (apply1 classify (1: Field(Itv)))".
_:in31 a ccd:FieldRaster, ccd:IntervalA.
_:out32 a ccd:Contour, ccd:PlainOrdinalA.


#<https://pro.arcgis.com/en/pro-app/tool-reference/spatial-analyst/zonal-statistics-as-table.htm>+<https://pro.arcgis.com/en/pro-app/tool-reference/data-management/join-field.htm>

tools:ZonalStatistics a :ToolCombination;
    tools:implements 
        tools:ZonalStatisticsSize, 
        tools:ZonalStatisticsMeanInterval, 
        tools:ZonalStatisticsMeanRatio, 
        tools:ZonalStatisticsSumCount;
    wf:edge _:wf4_1, _:wf4_2;
    wf:source _:in411, _:in412.
_:wf4_1 wf:applicationOf tools:ZonalStatisticsAsTableDef;
    wf:input1 _:in411;
    wf:input2 _:in412;
    wf:output _:out41.
_:wf4_2 wf:applicationOf tools:JoinFieldDef;
    wf:input1 _:out41;
    wf:input2 _:in412;
    wf:output _:out42.

tools:ZonalStatisticsSize a :ToolCombination;
    wf:input1 _:in411_1;
    wf:input2 _:in412_1;
    wf:output _:out42_1;
    rdfs:comment
        "Measures the size of the coverage of a given field raster inside object regions.";
    cct:expression
        """
        1: Field(Nom);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (groupbyR size (select eq (loTopo
                (fcover 1 (-: C(Nom)))
                (get_attrL 2)
            ) in))
        """.
_:in411_1
    wf:proxyFor _:in411;
    a ccd:FieldRaster, ccd:NominalA.
_:in412_1
    wf:proxyFor _:in412;
    a ccd:ObjectQ, ccd:VectorRegionA.
_:out42_1
    wf:proxyFor _:out42;
    a ccd:ObjectQ, ccd:VectorRegionA, exm:ERA.

#Zonal Statistics
sig:ZonalStatisticsMeanInterval a :Signature;
    wf:input1 _:in411_2;
    wf:input2 _:in412_2;
    wf:output _:out42_2;
    rdfs:comment
        "Calculates the average value of a field raster within the zones of a lattice.";
    cct:expression #"groupby_avg bowtie* sigmae lotopo pi1 field x objectregions y in field x".
        """
        1: Field(Itv);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (apply1 (fcont avg 1) (get_attrL 2))
        """.
_:in411_2
    wf:proxyFor _:in411;
    a ccd:FieldRaster, ccd:IntervalA.
_:in412_2
    wf:proxyFor _:in412;
    a ccd:ObjectQ, ccd:VectorTessellationA.
_:out42_2
    wf:proxyFor _:out42;
    a ccd:ObjectQ, ccd:VectorTessellationA, ccd:IntervalA.

sig:ZonalStatisticsMeanRatio a :Signature;
    wf:input1 _:in411_3;
    wf:input2 _:in412_3;
    wf:output _:out42_3;
    rdfs:comment
        "Calculates the average value of a field raster within the zones given by object regions. Outcome is intensive.";
    cct:expression
        #"groupby_avg bowtie* sigmae lotopo pi1 field x objectregions y in field x".
        #"join_attr (get_attrL (objectregionnominals x2)) (apply1 (fcont (avg) (field x1)) (get_attrL (objectregionnominals x2)))".
        """
        1: Field(Ratio);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (groupbyR avg (join_key
                (select eq (loTopo (pi1 1) (get_attrL 2)) in)
                1
            ))
        """.
_:in411_3
    wf:proxyFor _:in411;
    a ccd:FieldRaster, ccd:RatioA.
_:in412_3
    wf:proxyFor _:in412;
    a ccd:ObjectQ, ccd:PlainVectorRegionA.
_:out42_3
    wf:proxyFor _:out42;
    a ccd:ObjectQ, ccd:PlainVectorRegionA, exm:IRA.

#Zonal statistics: sum of count amounts
sig:ZonalStatisticsSumCount a :Signature;
    wf:input1 _:in411_4;
    wf:input2 _:in412_4;
    wf:output _:out42_4;
    rdfs:comment
        "Sums up count amounts (given as raster) into object regions.";
    cct:expression #"groupby_avg bowtie* sigmae lotopo pi1 field x objectregions y in field x".
        """
        1: Amounts(Count);
        2: ObjectInfo(Nom);
        join_attr
            (get_attrL 2)
            (groupbyL
                sum
                (join_key (orTopo (get_attrL 2) (pi1 1)) 1)
            )
        """.
_:in411_4
    wf:proxyFor _:in411;
    a ccd:AmountQ, ccd:RasterA, ccd:CountA.
_:in412_4
    wf:proxyFor _:in412;
    a ccd:ObjectQ, ccd:VectorRegionA.
_:out42_4
    wf:proxyFor _:out42;
    a ccd:ObjectQ, ccd:VectorRegionA, ccd:CountA.



sig:AddObjectVectorRegionArea a :Signature;
    :input [ :id 1; a ccd:ObjectQ, ccd:VectorRegionA ];
    wf:output [ a ccd:ObjectQ, ccd:VectorRegionA, exm:ERA ];
    rdfs:comment
        "Adds an area attribute to an object vector region layer.";
    cct:expression
        """
        1: ObjectInfo(Nom);
        join_attr
            (get_attrL 1)
            (apply1
                (compose size deify)
                (get_attrL 1)
            )
        """.

### noise proportion (vector version)

#this tool computes the coverage of a field inside object region by first intersecting and then dissolving  and joining, to obtain the area covered by the field inside the object region
tools:IntersectDissolve a :ToolCombination;
    tools:implements tools:IntersectDissolveField2Object;
    wf:edge _:wf8_1, _:wf8_2, _:wf8_3;
    wf:source _:in81, _:in82.
_:wf8_1 wf:applicationOf tools:IntersectDef;
    wf:input1 _:in81;
    wf:input2 _:in82;
    wf:output _:out81.
_:wf8_2 wf:applicationOf tools:MergeObjects;
    wf:input1 _:out81;
    wf:output _:out82.
_:wf8_3 wf:applicationOf tools:JoinFieldDef;
    wf:input1 _:out82;
    wf:input2 _:in82;
    wf:output _:out83.

##Coverage of vector field in object
sig:IntersectDissolveField2Object a :Signature;
    wf:input1 _:in81;
    wf:input2 _:in82;
    wf:output _:out83;
    rdfs:comment
        "Intersects a field vector with an object vector and then dissolves the result into the object to measure the areal coverage of the field inside the object.";
    cct:expression
        """
        1: Field(Nom);
        2: ObjectInfo(_);
        join_attr
            (get_attrL 2)
            (groupbyR size (select eq (loTopo
                (fcover 1 (-: C(Nom)))
                (get_attrL 2)
            ) in))
        """.
_:in81 a ccd:FieldQ, ccd:VectorRegionA.
_:in82 a ccd:ObjectQ,  ccd:VectorRegionA.
_:out83 a ccd:ObjectQ,  ccd:VectorRegionA, exm:ERA.


### Scenario: Temperature (amountFieldUtrecht.ttl)
### Source: own
#-------------------------------

tools:MakeLayerFromTable a :ToolCombination;
    tools:implements tools:MakePointMeasuresFromTable;
    wf:edge _:wf5_1, _:wf5_2, _:wf5_3,_:wf5_4;
    wf:source _:in51.
_:wf5_1  wf:applicationOf tools:MakeXyEventLayerDef;
    wf:input1 _:in51;
    wf:output _:out51.
_:wf5_2  wf:applicationOf tools:ProjectDef;
    wf:input1 _:out51;
    wf:output _:out52.
_:wf5_3  wf:applicationOf tools:ExcelToTableDef;
    wf:input1 _:in51;
    wf:output _:temp.
_:wf5_4  wf:applicationOf tools:JoinFieldDef;
    wf:input1 _:out52;
    wf:input2 _:temp;
    wf:output _:out53.

sig:MakePointMeasuresFromTable a :Signature;
    wf:input1 _:in51;
    wf:output _:out53;
    rdfs:comment
        "Makes a layer of pointmeasures from some XY table.";
    cct:expression
        "1: PointMeasures" .
_:in51 a ccd:PointMeasures, ccd:IntervalA.
_:out53 a ccd:PointMeasures, ccd:IntervalA.

sig:IDWInterval a :Signature;
    :input [ :id 1; a ccd:PointMeasures, ccd:IntervalA ];
    wf:output [ a ccd:FieldRaster, ccd:IntervalA ];
    rdfs:comment
        "Standard point interpolation for interval measurements.";
    cct:expression
        "interpol (1: PointMeasures) (deify (-: Reg))".

sig:KrigingInterval a :Signature;
    :input [ :id 1; a ccd:PointMeasures, ccd:IntervalA ];
    wf:output [ a ccd:FieldRaster, ccd:IntervalA ];
    rdfs:comment
        "Kriging point interpolation for interval measurements.";
    cct:expression
        "interpol (1: PointMeasures) (deify (-: Reg))".


##################################################
# [SC] arcpro tools

arcprodm:add-geometry-attributes.htm a :ToolImplementation;
    tools:implements tools:AddObjectVectorRegionArea.

arcpro3d:aspect.htm a :ToolImplementation;
    tools:implements tools:Aspect.

##Buffer (interpreted as vector representation of boolean field)
arcproan:buffer.htm a :ToolImplementation;
    tools:implements tools:ObjectBuffer.

#Builds ratio network from line objects
arcprona:build-network.htm a :ToolImplementation;
    tools:implements tools:BuildNetwork.

arcprodm:clip.htm a :ToolImplementation;
    tools:implements 
        tools:ClipObject2Object, 
        tools:ClipNomFieldVector2Extent, 
        tools:ClipBoolFieldVector2Extent, 
        tools:ClipFieldRaster2ObjectExtent,
        tools:ClipDef.

arcprosa:con-.htm a :ToolImplementation;
    tools:implements 
        tools:con1, 
        tools:con2, 
        tools:con3.

##Merge object parts into single object
arcprodm:dissolve.htm a :ToolImplementation;
    tools:implements tools:MergeObjects.

##Erase Vector fields
arcproan:erase.htm a :ToolImplementation;
    tools:implements tools:EraseFieldExtentfromFieldVector.

arcprosa:extract-by-mask.htm a :ToolImplementation;
    tools:implements tools:ExtractByMask.

##Feature class to feature class (=Select)
arcproco:feature-class-to-feature-class.htm a :ToolImplementation;
    tools:implements tools:FC2FCObjectTess.

#Flow direction accumulation
arcprosa:flow-accumulation.htm a :ToolImplementation;
    tools:implements tools:FlowAccumulation.

#Flow direction raster
arcprosa:flow-direction.htm a :ToolImplementation;
    tools:implements tools:FlowDirection.

arcprosa:flow-length.htm a :ToolImplementation;
    tools:implements tools:FlowLength.

#Near tool, to seach for the closest objects using Euclidean distance
arcproan:generate-near-table.htm a :ToolImplementation;
    tools:implements tools:NearPointObjects.

arcprosa:idw.htm a :ToolImplementation;
    tools:implements tools:IDWInterval.

arcprosa:kriging.htm a :ToolImplementation;
    tools:implements tools:KrigingInterval.

#<https://pro.arcgis.com/en/pro-app/tool-reference/conversion/polygon-to-raster.htm>
###Field Polygon to raster
arcproco:polygon-to-raster.htm a :ToolImplementation;
    tools:implements 
        tools:CoverageToNominalFieldRaster, 
        tools:ContourToFieldRaster.

arcprosa:raster-calculator.htm a :ToolImplementation;
    tools:implements 
        ### local map algebra transformation invert
        tools:LocalMapAlgebraInvert,
        ### local map algebra divide
        tools:LocalMapAlgebraDivide,
        ### local map algebra with only a single input layer
        tools:LocalMapAlgebraSubOrder, 
        tools:LocalMapAlgebraSubRatio,
        tools:RasterCalculatorDef,
        tools:RasterCalculator1Def.
    
arcproco:raster-to-polygon.htm a :ToolImplementation;
    tools:implements tools:RegionFromRasterExtent.

arcprosa:reclassify.htm a :ToolImplementation;
    tools:implements tools:RasterToIsoRaster.

##Select object by extent
arcproan:select.htm a :ToolImplementation;
    tools:implements tools:SelectObjectbyExtent. 

#Slope computation
arcprosa:slope.htm a :ToolImplementation;
   tools:implements tools:Slope.

#Snap point to raster
arcprosa:snap-pour-point.htm a :ToolImplementation;
    tools:implements tools:SnapPourPoint.

arcproan:spatial-join.htm a :ToolImplementation;
    tools:implements 
        # with JOIN_ONE_TO_ONE parameter, with Merge_RULe sum for Ratio data.
        tools:SpatialJoinSumTessRatio,
        # with JOIN_ONE_TO_ONE parameter, with Merge_RULe sum for Count data.
        tools:SpatialJoinSumTessCount,
        # with JOIN_ONE_TO_ONE parameter, with Merge_RULe sum for Ratio data.
        tools:SpatialJoinAmountSumTessRatio,
        # with JOIN_ONE_TO_ONE parameter, with Merge_RULe sum for Count data.
        tools:SpatialJoinAmountSumTessCount,
        # with JOIN_ONE_TO_ONE parameter, with Merge_RULe mean for interval data.
        tools:SpatialJoinMeanTessInterval,
        # with JOIN_ONE_TO_ONE parameter, with Merge_RULe mean for Ratio data.
        tools:SpatialJoinMeanTessRatio,
        # with JOIN_ONE_TO_ONE parameter, with Merge_RULe mean for Count data.
        tools:SpatialJoinMeanTessCount,
        # with JOIN_ONE_TO_ONE parameter and with Merge_RULe count.
        tools:SpatialJoinCountTess.

##Summary statistics for amounts
arcproan:summary-statistics.htm a :ToolImplementation;
    tools:implements 
        tools:ObjectSummaryStatisticsAmount, 
        tools:SummaryStatisticsAmount. 

arcprosa:watershed.htm a :ToolImplementation;
    tools:implements tools:Watershed.


##################################################
# [SC] these arcpro tools need to be annotated

tools:ClipDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorRegionA, ccd:NominalA ];
    :input [ :id 2; a ccd:CoreConceptQ, ccd:VectorRegionA, ccd:NominalA ];
    wf:output [ a ccd:CoreConceptQ, ccd:VectorRegionA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Clip arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".
    
tools:RasterCalculatorDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:RasterA, ccd:NominalA ];
    :input [ :id 2; a ccd:CoreConceptQ, ccd:RasterA, ccd:NominalA ];
    wf:output [ a ccd:CoreConceptQ, ccd:RasterA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Raster Calculator arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".
    
tools:RasterCalculator1Def a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:RasterA, ccd:NominalA ];    
    wf:output [ a ccd:CoreConceptQ, ccd:RasterA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Raster Calculator arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".    

arcprona:make-closest-facility-analysis-layer.htm
    tools:implements tools:MakeClosestFacilityAnalysisLayerDef.
tools:MakeClosestFacilityAnalysisLayerDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output    
    :input [ :id 1; a ccd:NetworkQ, ccd:LineA, ccd:RatioA ];    
    wf:output [ a ccd:NetworkQ, ccd:LineA, ccd:RatioA ];
    rdfs:comment
        "This is the default annotation for the Make Closest Facility Analysis Layer arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprona:add-locations.htm
    tools:implements tools:AddLocationsDef.
tools:AddLocationsDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:NetworkQ, ccd:LineA, ccd:RatioA ];
    :input [ :id 2; a ccd:CoreConceptQ, ccd:PointA, ccd:NominalA ];
    wf:output [ a ccd:NetworkQ, ccd:LineA, ccd:RatioA ];
    rdfs:comment
        "This is the default annotation for the Add Locations arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprona:solve.htm
    tools:implements tools:SolveDef.
tools:SolveDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:NetworkQ, ccd:LineA, ccd:RatioA ];    
    wf:output [ a ccd:ObjectQ, ccd:PointA, ccd:RatioA ];
    rdfs:comment
        "This is the default annotation for the Solve arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcproco:excel-to-table.htm
    tools:implements tools:ExcelToTableDef.
tools:ExcelToTableDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];    
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Excel To Table arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprodm:join-field.htm
    tools:implements tools:JoinFieldDef.
tools:JoinFieldDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    :input [ :id 2; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Join Field arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcproco:table-to-table.htm
    tools:implements tools:TableToTableDef.
tools:TableToTableDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:RasterA, ccd:NominalA ];    
    wf:output [ a ccd:AmountQ, ccd:VectorRegionA, ccd:RatioA ];
    rdfs:comment
        "This is the default annotation for the Table To Table arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprodm:add-field.htm
    tools:implements tools:AddFieldDef.
tools:AddFieldDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];    
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Add Field arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprodm:calculate-field.htm
    tools:implements tools:CalculateFieldDef, tools:CalculateField2Def.
tools:CalculateFieldDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];    
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Calculate Field arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".    
tools:CalculateField2Def a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];  
	:input [ :id 2; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];     
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Calculate Field arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".
    

arcprodm:add-fields.htm
    tools:implements tools:AddFieldsDef.
tools:AddFieldsDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];    
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Add Fields arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprodm:select-layer-by-attribute.htm
    tools:implements tools:SelectLayerByAttributeDef.
tools:SelectLayerByAttributeDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];    
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Select Layer By Attribute arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprodm:copy-features.htm
    tools:implements tools:CopyFeaturesDef.
tools:CopyFeaturesDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];    
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Copy Features arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprodm:select-layer-by-location.htm
    tools:implements tools:SelectLayerByLocationDef.
tools:SelectLayerByLocationDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ]; 
	:input [ :id 2; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];     
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Select Layer By Location arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprosa:zonal-statistics-as-table.htm
    tools:implements tools:ZonalStatisticsAsTableDef.
tools:ZonalStatisticsAsTableDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:RasterA, ccd:NominalA ];
    :input [ :id 2; a ccd:CoreConceptQ, ccd:VectorRegionA, ccd:NominalA ];
    wf:output [ a ccd:CoreConceptQ, ccd:VectorRegionA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Zonal Statistics As Table arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcproan:intersect.htm
    tools:implements tools:IntersectDef.
tools:IntersectDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    :input [ :id 2; a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    wf:output [ a ccd:CoreConceptQ, ccd:VectorA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Intersect arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprodm:make-xy-event-layer.htm
    tools:implements tools:MakeXyEventLayerDef.
tools:MakeXyEventLayerDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:PointA, ccd:NominalA ];    
    wf:output [ a ccd:CoreConceptQ, ccd:PointA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Make Xy Event Layer arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".

arcprodm:project.htm
    tools:implements tools:ProjectDef.
tools:ProjectDef a :PartialToolSpecification;
    # [SC][TODO] annotate inputs and output
    :input [ :id 1; a ccd:CoreConceptQ, ccd:LayerA, ccd:NominalA ];
    :input [ :id 2; a ccd:CoreConceptQ, ccd:LayerA, ccd:NominalA ];
    wf:output [ a ccd:CoreConceptQ, ccd:LayerA, ccd:NominalA ];
    rdfs:comment
        "This is the default annotation for the Project arcpro tool to be used when an algebra expression is not possible to produce.";
    cct:expression "".
